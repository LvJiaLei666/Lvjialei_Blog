import{_ as a,c as s,o as e,U as t}from"./chunks/framework.NOjL19Y0.js";const i="/assets/image-20240516165417923.b8_hxoDP.png",n="/assets/image-20240516165755972.YceO91DM.png",_=JSON.parse('{"title":"patch-package","description":"","frontmatter":{},"headers":[],"relativePath":"docs/notes/patch-package.md","filePath":"docs/notes/patch-package.md","lastUpdated":1726736353000}'),p={name:"docs/notes/patch-package.md"},o=t('<h1 id="patch-package" tabindex="-1">patch-package <a class="header-anchor" href="#patch-package" aria-label="Permalink to &quot;patch-package&quot;">​</a></h1><h2 id="一、背景" tabindex="-1">一、背景 <a class="header-anchor" href="#一、背景" aria-label="Permalink to &quot;一、背景&quot;">​</a></h2><p>起初是发现有一天<code>npm install</code> 之后项目突然跑不起来了，就开始了排查之旅。排查到最后发现<code>taro-ui</code>按需引入<code>toast</code>样式文件后，文件对比之前突然多了一行代码。修改<code>node_modules</code>中源代码后项目就可以正常启动了。</p><p>随后我就跑去<code>github</code>给<code>taro-ui</code>提issue，第二天被告知维护者已经给<code>taro</code>提了pr，但是对于我这个版本没有效果（这里后来没问出原因），他说可以用<code>patch</code>的方式去先暂时把源码改掉。</p><p>这时，我才发现一个新工具 <code>patch-package</code></p><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><blockquote><p>lets app authors instantly make and keep fixes to npm dependencies. It&#39;s a vital band-aid for those of us living on the bleeding edge.</p></blockquote><p>这是npm官网上对patch-package的说明，意思就是<em>允许应用程序作者立即对NPM依赖项进行修复。对于前端来说，这是一个至关重要的补丁。</em> 也就是说可以让大家对node_modules进行立即更改。</p><h2 id="二、使用" tabindex="-1">二、使用 <a class="header-anchor" href="#二、使用" aria-label="Permalink to &quot;二、使用&quot;">​</a></h2><h4 id="_1-安装" tabindex="-1">1. 安装 <a class="header-anchor" href="#_1-安装" aria-label="Permalink to &quot;1. 安装&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span></span></code></pre></div><p>如果你不需要在生产中运行</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><p>yarn、pnpm、docker安装命令可查看其 <a href="https://link.zhihu.com/?target=https%3A//github.com/ds300/patch-package" target="_blank" rel="noreferrer">git官网。</a></p><h4 id="_2-修改npm包" tabindex="-1">2. 修改npm包 <a class="header-anchor" href="#_2-修改npm包" aria-label="Permalink to &quot;2. 修改npm包&quot;">​</a></h4><p>更改node_modules 文件夹中要修改依赖包的文件</p><h4 id="_3-生成补丁文件" tabindex="-1">3. 生成补丁文件 <a class="header-anchor" href="#_3-生成补丁文件" aria-label="Permalink to &quot;3. 生成补丁文件&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">修改包名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>会自动在项目中生成一个patches文件夹，并放置了修改文件的patch文件</p><p><img src="'+i+`" alt="image-20240516165417923"></p><p>内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>diff --git a/node_modules/taro-ui/dist/style/components/toast.scss b/node_modules/taro-ui/dist/style/components/toast.scss</span></span>
<span class="line"><span>index f53d1ec..6163d14 100644</span></span>
<span class="line"><span>--- a/node_modules/taro-ui/dist/style/components/toast.scss</span></span>
<span class="line"><span>+++ b/node_modules/taro-ui/dist/style/components/toast.scss</span></span>
<span class="line"><span>@@ -1,4 +1,3 @@</span></span>
<span class="line"><span>-@use &quot;sass:math&quot;;</span></span>
<span class="line"><span> @import &#39;../variables/default.scss&#39;;</span></span>
<span class="line"><span> @import &#39;../mixins/index.scss&#39;;</span></span></code></pre></div><h4 id="_4-添加自动执行命令" tabindex="-1">4. 添加自动执行命令 <a class="header-anchor" href="#_4-添加自动执行命令" aria-label="Permalink to &quot;4. 添加自动执行命令&quot;">​</a></h4><p>In package.json</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">   ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patch-package&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h4 id="_5-重新安装node-modules依赖" tabindex="-1">5. 重新安装node_modules依赖 <a class="header-anchor" href="#_5-重新安装node-modules依赖" aria-label="Permalink to &quot;5. 重新安装node_modules依赖&quot;">​</a></h4><p>至此已完成，重新删除node_modules后执行 <code>npm install</code> 会发现代码已经是修改过后的。</p><p><img src="`+n+'" alt="image-20240516165755972"></p>',28),l=[o];function h(c,d,r,k,g,u){return e(),s("div",null,l)}const b=a(p,[["render",h]]);export{_ as __pageData,b as default};
